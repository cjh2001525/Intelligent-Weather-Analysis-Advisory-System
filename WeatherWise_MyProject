{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/cjh2001525/Intelligent-Weather-Analysis-Advisory-System/blob/main/starter_notebook%20by%20Junhan.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "72e78a05",
      "metadata": {
        "id": "72e78a05"
      },
      "source": [
        "# üå¶Ô∏è WeatherWise ‚Äì Starter Notebook\n",
        "\n",
        "Welcome to your **WeatherWise** project notebook! This scaffold is designed to help you build your weather advisor app using Python, visualisations, and AI-enhanced development.\n",
        "\n",
        "---\n",
        "\n",
        "üìÑ **Full Assignment Specification**  \n",
        "See [`ASSIGNMENT.md`](ASSIGNMENT.md) or check the LMS for full details.\n",
        "\n",
        "üìù **Quick Refresher**  \n",
        "A one-page summary is available in [`resources/assignment-summary.md`](resources/assignment-summary.md).\n",
        "\n",
        "---\n",
        "\n",
        "üß† **This Notebook Structure is Optional**  \n",
        "You‚Äôre encouraged to reorganise, rename sections, or remove scaffold cells if you prefer ‚Äî as long as your final version meets the requirements.\n",
        "\n",
        "‚úÖ You may delete this note before submission.\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "fa8c7f6c",
      "metadata": {
        "id": "fa8c7f6c"
      },
      "source": [
        "## üß∞ Setup and Imports\n",
        "\n",
        "This section imports commonly used packages and installs any additional tools used in the project.\n",
        "\n",
        "- You may not need all of these unless you're using specific features (e.g. visualisations, advanced prompting).\n",
        "- The notebook assumes the following packages are **pre-installed** in the provided environment or installable via pip:\n",
        "  - `requests`, `matplotlib`, `pyinputplus`\n",
        "  - `fetch-my-weather` (for accessing weather data easily)\n",
        "  - `hands-on-ai` (for AI logging, comparisons, or prompting tools)\n",
        "\n",
        "If you're running this notebook in **Google Colab**, uncomment the following lines to install the required packages.\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 20,
      "id": "70c3f3f1",
      "metadata": {
        "id": "70c3f3f1",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e916f98f-d2e1-4fbc-a0da-38a7dd6db3f4"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: requests in /usr/local/lib/python3.12/dist-packages (2.32.4)\n",
            "Requirement already satisfied: charset_normalizer<4,>=2 in /usr/local/lib/python3.12/dist-packages (from requests) (3.4.3)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.12/dist-packages (from requests) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.12/dist-packages (from requests) (2.5.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.12/dist-packages (from requests) (2025.8.3)\n",
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.12/dist-packages (3.10.0)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.12/dist-packages (from matplotlib) (1.3.3)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.12/dist-packages (from matplotlib) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.12/dist-packages (from matplotlib) (4.60.0)\n",
            "Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.12/dist-packages (from matplotlib) (1.4.9)\n",
            "Requirement already satisfied: numpy>=1.23 in /usr/local/lib/python3.12/dist-packages (from matplotlib) (2.0.2)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.12/dist-packages (from matplotlib) (25.0)\n",
            "Requirement already satisfied: pillow>=8 in /usr/local/lib/python3.12/dist-packages (from matplotlib) (11.3.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.12/dist-packages (from matplotlib) (3.2.4)\n",
            "Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.12/dist-packages (from matplotlib) (2.9.0.post0)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.12/dist-packages (from python-dateutil>=2.7->matplotlib) (1.17.0)\n",
            "Requirement already satisfied: pyinputplus in /usr/local/lib/python3.12/dist-packages (0.2.12)\n",
            "Requirement already satisfied: pysimplevalidate>=0.2.7 in /usr/local/lib/python3.12/dist-packages (from pyinputplus) (0.2.12)\n",
            "Requirement already satisfied: stdiomask>=0.0.3 in /usr/local/lib/python3.12/dist-packages (from pyinputplus) (0.0.6)\n"
          ]
        }
      ],
      "source": [
        "# === Install Dependencies (Colab/Jupyter only) ===\n",
        "# Use this cell ONLY if you see ModuleNotFoundError when importing\n",
        "\n",
        "# Weather + HTTP\n",
        "!pip install requests\n",
        "\n",
        "# Visualization\n",
        "!pip install matplotlib\n",
        "\n",
        "# Input validation for menu interface\n",
        "!pip install pyinputplus\n",
        "\n",
        "# Optional helper packages (we are not using them by default)\n",
        "# !pip install fetch-my-weather\n",
        "# !pip install hands-on-ai\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# === Imports and Configuration ===\n",
        "import os\n",
        "import re\n",
        "import requests\n",
        "import matplotlib.pyplot as plt\n",
        "from datetime import datetime, timezone\n",
        "from typing import Dict, Any\n",
        "\n",
        "# Try to import pyinputplus (menu library)\n",
        "try:\n",
        "    import pyinputplus as pyip\n",
        "    _HAS_PYIP = True\n",
        "except ImportError:\n",
        "    _HAS_PYIP = False\n",
        "\n",
        "# Optional: AI tools (commented out unless needed for logging AI interactions)\n",
        "# from fetch_my_weather import get_weather\n",
        "# from hands_on_ai.chat import get_response\n",
        "\n",
        "# Global config\n",
        "WTTR_URL = \"https://wttr.in/{location}?format=j1\"\n",
        "REQUEST_TIMEOUT = 12\n",
        "DEFAULT_FORECAST_DAYS = 5\n",
        "UNITS = \"metric\"  # Celsius, km/h\n",
        "\n",
        "# Matplotlib defaults\n",
        "plt.rcParams[\"figure.figsize\"] = (8, 4)\n",
        "plt.rcParams[\"axes.grid\"] = True\n",
        "\n",
        "# === Utility Functions ===\n",
        "def clamp_forecast_days(days: int) -> int:\n",
        "    \"\"\"Clamp forecast days to [1, 5].\"\"\"\n",
        "    try:\n",
        "        d = int(days)\n",
        "    except Exception:\n",
        "        d = DEFAULT_FORECAST_DAYS\n",
        "    return max(1, min(5, d))\n",
        "\n",
        "def clean_location(location: str) -> str:\n",
        "    \"\"\"Trim whitespace and collapse multiple spaces.\"\"\"\n",
        "    if not isinstance(location, str):\n",
        "        return \"\"\n",
        "    return re.sub(r\"\\s+\", \" \", location.strip())\n",
        "\n",
        "def http_get_json(url: str) -> Dict[str, Any]:\n",
        "    \"\"\"HTTP GET JSON with basic error wrapping.\"\"\"\n",
        "    try:\n",
        "        r = requests.get(url, timeout=REQUEST_TIMEOUT)\n",
        "        r.raise_for_status()\n",
        "        return {\"ok\": True, \"data\": r.json()}\n",
        "    except requests.RequestException as e:\n",
        "        return {\"ok\": False, \"error\": str(e)}\n",
        "\n",
        "def now_iso() -> str:\n",
        "    \"\"\"UTC timestamp string for returned payloads/logging.\"\"\"\n",
        "    return datetime.now(timezone.utc).strftime(\"%Y-%m-%d %H:%M:%S %Z\")\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "B2JKlJfrGgIb"
      },
      "id": "B2JKlJfrGgIb",
      "execution_count": 21,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "id": "59ae7543",
      "metadata": {
        "id": "59ae7543"
      },
      "source": [
        "## üì¶ Setup and Configuration\n",
        "Import required packages and setup environment."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 35,
      "id": "f1dd051e",
      "metadata": {
        "id": "f1dd051e"
      },
      "outputs": [],
      "source": [
        "# === Setup and Configuration ===\n",
        "import os\n",
        "import re\n",
        "import requests\n",
        "import matplotlib.pyplot as plt\n",
        "from datetime import datetime, timezone\n",
        "from typing import Dict, Any\n",
        "\n",
        "# Try to import pyinputplus (menu library)\n",
        "try:\n",
        "    import pyinputplus as pyip\n",
        "    _HAS_PYIP = True\n",
        "except ImportError:\n",
        "    _HAS_PYIP = False\n",
        "\n",
        "# Optional: AI tools (commented out unless needed for logging AI interactions)\n",
        "# from fetch_my_weather import get_weather\n",
        "# from hands_on_ai.chat import get_response\n",
        "\n",
        "# Global config for weather API\n",
        "WTTR_URL = \"https://wttr.in/{location}?format=j1\"\n",
        "REQUEST_TIMEOUT = 12\n",
        "DEFAULT_FORECAST_DAYS = 5\n",
        "UNITS = \"metric\"  # Celsius, km/h\n",
        "\n",
        "# Matplotlib defaults\n",
        "plt.rcParams[\"figure.figsize\"] = (8, 4)\n",
        "plt.rcParams[\"axes.grid\"] = True\n",
        "\n",
        "# === Utility Functions ===\n",
        "def clamp_forecast_days(days: int) -> int:\n",
        "    \"\"\"Clamp forecast days to [1, 5].\"\"\"\n",
        "    try:\n",
        "        d = int(days)\n",
        "    except Exception:\n",
        "        d = DEFAULT_FORECAST_DAYS\n",
        "    return max(1, min(5, d))\n",
        "\n",
        "def clean_location(location: str) -> str:\n",
        "    \"\"\"Trim whitespace and collapse multiple spaces.\"\"\"\n",
        "    if not isinstance(location, str):\n",
        "        return \"\"\n",
        "    return re.sub(r\"\\s+\", \" \", location.strip())\n",
        "\n",
        "def http_get_json(url: str) -> Dict[str, Any]:\n",
        "    \"\"\"HTTP GET JSON with basic error wrapping.\"\"\"\n",
        "    try:\n",
        "        r = requests.get(url, timeout=REQUEST_TIMEOUT)\n",
        "        r.raise_for_status()\n",
        "        return {\"ok\": True, \"data\": r.json()}\n",
        "    except requests.RequestException as e:\n",
        "        return {\"ok\": False, \"error\": str(e)}\n",
        "\n",
        "def now_iso() -> str:\n",
        "    \"\"\"UTC timestamp string for returned payloads/logging.\"\"\"\n",
        "    return datetime.now(timezone.utc).strftime(\"%Y-%m-%d %H:%M:%S %Z\")\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "CglZ8Jb43sPE"
      },
      "id": "CglZ8Jb43sPE"
    },
    {
      "cell_type": "markdown",
      "id": "f736ade3",
      "metadata": {
        "id": "f736ade3"
      },
      "source": [
        "## üå§Ô∏è Weather Data Functions"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 24,
      "id": "7a2c7cd0",
      "metadata": {
        "id": "7a2c7cd0"
      },
      "outputs": [],
      "source": [
        "def get_weather_data(location: str, forecast_days: int = 5) -> Dict[str, Any]:\n",
        "    \"\"\"\n",
        "    Retrieve weather data for a specified location using the wttr.in API.\n",
        "\n",
        "    Args:\n",
        "        location (str): City or location name\n",
        "        forecast_days (int): Number of days to forecast (1-5)\n",
        "\n",
        "    Returns:\n",
        "        dict: Weather data including current conditions and forecast\n",
        "    \"\"\"\n",
        "    # Ensure valid forecast days\n",
        "    forecast_days = clamp_forecast_days(forecast_days)\n",
        "    location = clean_location(location)\n",
        "\n",
        "    # Build request\n",
        "    url = WTTR_URL.format(location=location)\n",
        "    result = http_get_json(url)\n",
        "    if not result[\"ok\"]:\n",
        "        return {\"ok\": False, \"error\": result.get(\"error\", \"Unknown error\")}\n",
        "\n",
        "    data = result[\"data\"]\n",
        "\n",
        "    # Extract current weather\n",
        "    current = data[\"current_condition\"][0]\n",
        "    current_weather = {\n",
        "        \"temperature\": int(current[\"temp_C\"]),\n",
        "        \"humidity\": int(current[\"humidity\"]),\n",
        "        \"condition\": current[\"weatherDesc\"][0][\"value\"],\n",
        "        \"wind_speed\": int(current[\"windspeedKmph\"]),\n",
        "        \"wind_direction\": current[\"winddir16Point\"],\n",
        "        \"precipitation\": float(current[\"precipMM\"]),\n",
        "    }\n",
        "\n",
        "    # Extract forecast (limit by forecast_days)\n",
        "    forecast_list = []\n",
        "    for day in data[\"weather\"][:forecast_days]:\n",
        "        forecast_list.append({\n",
        "            \"date\": day[\"date\"],\n",
        "            \"min_temp\": int(day[\"mintempC\"]),\n",
        "            \"max_temp\": int(day[\"maxtempC\"]),\n",
        "            \"condition\": day[\"hourly\"][4][\"weatherDesc\"][0][\"value\"],  # midday snapshot\n",
        "            \"precipitation_chance\": int(day[\"hourly\"][4][\"chanceofrain\"]),\n",
        "        })\n",
        "\n",
        "    return {\n",
        "        \"ok\": True,\n",
        "        \"location\": location,\n",
        "        \"units\": UNITS,\n",
        "        \"timestamp\": now_iso(),\n",
        "        \"current\": current_weather,\n",
        "        \"forecast\": forecast_list,\n",
        "    }\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "8a744fdc",
      "metadata": {
        "id": "8a744fdc"
      },
      "source": [
        "## üìä Visualisation Functions"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 26,
      "id": "9dc3bf85",
      "metadata": {
        "id": "9dc3bf85"
      },
      "outputs": [],
      "source": [
        "# Define create_temperature_visualisation() and create_precipitation_visualisation() here\n",
        "def create_temperature_visualisation(weather_data, output_type='display'):\n",
        "    \"\"\"\n",
        "    Create visualisation of temperature data.\n",
        "\n",
        "    Args:\n",
        "        weather_data (dict): The processed weather data (from get_weather_data)\n",
        "        output_type (str): Either 'display' to show in notebook or 'figure' to return the figure\n",
        "\n",
        "    Returns:\n",
        "        If output_type is 'figure', returns the matplotlib figure object.\n",
        "        Otherwise, displays the visualisation in the notebook and returns None.\n",
        "    \"\"\"\n",
        "    # Basic validation\n",
        "    if not isinstance(weather_data, dict) or weather_data.get(\"ok\") is False:\n",
        "        print(f\"Error: {weather_data.get('error','No valid weather data.') if isinstance(weather_data, dict) else 'No valid weather data.'}\")\n",
        "        return None\n",
        "\n",
        "    forecast = weather_data.get(\"forecast\", [])\n",
        "    if not forecast:\n",
        "        print(\"No forecast data available.\")\n",
        "        return None\n",
        "\n",
        "    # Prepare data\n",
        "    dates = [day.get(\"date\", \"\") for day in forecast]\n",
        "    min_temps = [day.get(\"min_temp\") for day in forecast]\n",
        "    max_temps = [day.get(\"max_temp\") for day in forecast]\n",
        "\n",
        "    # Plot\n",
        "    fig, ax = plt.subplots()\n",
        "    ax.plot(dates, min_temps, marker=\"o\", label=\"Min Temp (¬∞C)\")\n",
        "    ax.plot(dates, max_temps, marker=\"o\", label=\"Max Temp (¬∞C)\")\n",
        "    ax.set_title(f\"Temperature Trend for {weather_data.get('location','')}\")\n",
        "    ax.set_xlabel(\"Date\")\n",
        "    ax.set_ylabel(\"Temperature (¬∞C)\")\n",
        "    ax.legend()\n",
        "\n",
        "    if output_type == \"figure\":\n",
        "        return fig\n",
        "    else:\n",
        "        plt.show()\n",
        "        return None\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "def create_precipitation_visualisation(weather_data, output_type='display'):\n",
        "    \"\"\"\n",
        "    Create visualisation of precipitation data.\n",
        "\n",
        "    Args:\n",
        "        weather_data (dict): The processed weather data (from get_weather_data)\n",
        "        output_type (str): Either 'display' to show in notebook or 'figure' to return the figure\n",
        "\n",
        "    Returns:\n",
        "        If output_type is 'figure', returns the matplotlib figure object.\n",
        "        Otherwise, displays the visualisation in the notebook and returns None.\n",
        "    \"\"\"\n",
        "    # Basic validation\n",
        "    if not isinstance(weather_data, dict) or weather_data.get(\"ok\") is False:\n",
        "        print(f\"Error: {weather_data.get('error','No valid weather data.') if isinstance(weather_data, dict) else 'No valid weather data.'}\")\n",
        "        return None\n",
        "\n",
        "    forecast = weather_data.get(\"forecast\", [])\n",
        "    if not forecast:\n",
        "        print(\"No forecast data available.\")\n",
        "        return None\n",
        "\n",
        "    # Prepare data\n",
        "    dates = [day.get(\"date\", \"\") for day in forecast]\n",
        "    precipitation_chances = [day.get(\"precipitation_chance\", 0) for day in forecast]\n",
        "\n",
        "    # Plot\n",
        "    fig, ax = plt.subplots()\n",
        "    ax.bar(dates, precipitation_chances)\n",
        "    ax.set_title(f\"Precipitation Chances for {weather_data.get('location','')}\")\n",
        "    ax.set_xlabel(\"Date\")\n",
        "    ax.set_ylabel(\"Chance of Rain (%)\")\n",
        "    ax.set_ylim(0, 100)\n",
        "\n",
        "    if output_type == \"figure\":\n",
        "        return fig\n",
        "    else:\n",
        "        plt.show()\n",
        "        return None\n"
      ],
      "metadata": {
        "id": "HpOlQylYG5Ho"
      },
      "id": "HpOlQylYG5Ho",
      "execution_count": 27,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "id": "9f95d160",
      "metadata": {
        "id": "9f95d160"
      },
      "source": [
        "## ü§ñ Natural Language Processing"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 28,
      "id": "bcc5833e",
      "metadata": {
        "id": "bcc5833e"
      },
      "outputs": [],
      "source": [
        "# === Natural Language Processing ===\n",
        "import re\n",
        "from datetime import datetime\n",
        "\n",
        "def parse_weather_question(question: str) -> dict:\n",
        "    \"\"\"\n",
        "    Parse a natural language weather question.\n",
        "\n",
        "    Returns a dict like:\n",
        "      {\n",
        "        \"topic\": \"rain\" | \"temperature\" | \"wind\" | \"humidity\" | \"general\",\n",
        "        \"day\": int (0=today, 1=tomorrow, etc.),\n",
        "        \"raw\": original_question\n",
        "      }\n",
        "    \"\"\"\n",
        "    if not isinstance(question, str) or not question.strip():\n",
        "        return {\"topic\": \"general\", \"day\": 0, \"raw\": question}\n",
        "\n",
        "    q = question.strip().lower()\n",
        "\n",
        "    # Topic detection\n",
        "    topic = \"general\"\n",
        "    if any(w in q for w in [\"rain\", \"umbrella\", \"wet\", \"shower\", \"storm\"]):\n",
        "        topic = \"rain\"\n",
        "    elif any(w in q for w in [\"temp\", \"temperature\", \"hot\", \"cold\", \"warm\", \"chilly\"]):\n",
        "        topic = \"temperature\"\n",
        "    elif any(w in q for w in [\"wind\", \"windy\", \"breeze\", \"gale\"]):\n",
        "        topic = \"wind\"\n",
        "    elif any(w in q for w in [\"humid\", \"humidity\", \"moist\"]):\n",
        "        topic = \"humidity\"\n",
        "\n",
        "    # Day detection\n",
        "    day_offset = None\n",
        "    if \"today\" in q:\n",
        "        day_offset = 0\n",
        "    elif \"tomorrow\" in q:\n",
        "        day_offset = 1\n",
        "    else:\n",
        "        weekdays = [\"monday\",\"tuesday\",\"wednesday\",\"thursday\",\"friday\",\"saturday\",\"sunday\"]\n",
        "        for i, name in enumerate(weekdays):\n",
        "            if name in q:\n",
        "                today_idx = datetime.today().weekday()   # Monday=0\n",
        "                target_idx = i\n",
        "                day_offset = (target_idx - today_idx) % 7\n",
        "                break\n",
        "\n",
        "    if day_offset is None:\n",
        "        day_offset = 0\n",
        "\n",
        "    return {\"topic\": topic, \"day\": int(day_offset), \"raw\": question}\n",
        "\n",
        "\n",
        "def generate_weather_response(parsed_question: dict, weather_data: dict) -> str:\n",
        "    \"\"\"\n",
        "    Generate a natural language response based on parsed question and weather data.\n",
        "    \"\"\"\n",
        "    if not isinstance(parsed_question, dict):\n",
        "        return \"Sorry, I could not understand the question.\"\n",
        "    if not isinstance(weather_data, dict) or (weather_data.get(\"ok\") is False):\n",
        "        return \"Sorry, weather data is not available right now.\"\n",
        "\n",
        "    topic = parsed_question.get(\"topic\", \"general\")\n",
        "    day = int(parsed_question.get(\"day\", 0))\n",
        "\n",
        "    location = weather_data.get(\"location\", \"your location\")\n",
        "    current = weather_data.get(\"current\", {})\n",
        "    forecast = weather_data.get(\"forecast\", [])\n",
        "\n",
        "    # Fallback if forecast is missing\n",
        "    if not forecast:\n",
        "        temp = current.get(\"temperature\")\n",
        "        cond = current.get(\"condition\", \"unavailable\")\n",
        "        if temp is None:\n",
        "            return f\"Current conditions for {location} are {cond}.\"\n",
        "        return f\"Right now in {location} it is {temp}¬∞C and {cond}.\"\n",
        "\n",
        "    # Clamp day index\n",
        "    if day < 0:\n",
        "        day = 0\n",
        "    if day >= len(forecast):\n",
        "        day = len(forecast) - 1\n",
        "\n",
        "    day_data = forecast[day]\n",
        "    day_label = \"today\" if day == 0 else (\"tomorrow\" if day == 1 else f\"on {day_data.get('date','that day')}\")\n",
        "\n",
        "    if topic == \"rain\":\n",
        "        chance = day_data.get(\"precipitation_chance\")\n",
        "        if chance is None:\n",
        "            return f\"Rain probability {day_label} in {location} is unavailable.\"\n",
        "        verdict = \"likely\" if chance >= 50 else \"unlikely\"\n",
        "        return f\"Rain is {verdict} {day_label} in {location} (chance {chance}%).\"\n",
        "\n",
        "    elif topic == \"temperature\":\n",
        "        tmin = day_data.get(\"min_temp\")\n",
        "        tmax = day_data.get(\"max_temp\")\n",
        "        cond = day_data.get(\"condition\", \"unknown conditions\")\n",
        "        if tmin is None or tmax is None:\n",
        "            return f\"Temperature details {day_label} in {location} are unavailable.\"\n",
        "        return f\"{day_label.capitalize()} in {location}: {cond}, {tmin}‚Äì{tmax}¬∞C.\"\n",
        "\n",
        "    elif topic == \"wind\":\n",
        "        ws = current.get(\"wind_speed\")\n",
        "        wd = current.get(\"wind_direction\", \"\")\n",
        "        if ws is None:\n",
        "            return f\"Wind details are not available right now for {location}.\"\n",
        "        return f\"Current wind in {location} is about {ws} km/h {wd}. Daily wind forecast is not available.\"\n",
        "\n",
        "    elif topic == \"humidity\":\n",
        "        h = current.get(\"humidity\")\n",
        "        if h is None:\n",
        "            return f\"Humidity is not available right now for {location}.\"\n",
        "        return f\"Current humidity in {location} is {h}%.\"\n",
        "\n",
        "    # General / fallback\n",
        "    tnow = current.get(\"temperature\")\n",
        "    cnow = current.get(\"condition\", \"unknown conditions\")\n",
        "    if tnow is None:\n",
        "        return f\"Current conditions for {location}: {cnow}.\"\n",
        "    return f\"Right now in {location} it is {tnow}¬∞C and {cnow}. {day_label.capitalize()} looks {day_data.get('condition','unclear')} with {day_data.get('min_temp','?')}‚Äì{day_data.get('max_temp','?')}¬∞C.\"\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "0d85225e",
      "metadata": {
        "id": "0d85225e"
      },
      "source": [
        "## üß≠ User Interface"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 29,
      "id": "fa6cb0f6",
      "metadata": {
        "id": "fa6cb0f6"
      },
      "outputs": [],
      "source": [
        "# === User Interface ===\n",
        "\n",
        "# Uses _HAS_PYIP from Setup cell (pyinputplus available or not)\n",
        "\n",
        "def prompt_location() -> str:\n",
        "    \"\"\"\n",
        "    Ask the user for a location and return a cleaned string.\n",
        "    \"\"\"\n",
        "    raw = input(\"Enter a city or location: \")\n",
        "    loc = clean_location(raw)\n",
        "    while not loc:\n",
        "        print(\"Please enter a non-empty location.\")\n",
        "        raw = input(\"Enter a city or location: \")\n",
        "        loc = clean_location(raw)\n",
        "    return loc\n",
        "\n",
        "def _menu_with_pyip(choices):\n",
        "    \"\"\"Menu using pyinputplus if available.\"\"\"\n",
        "    return pyip.inputMenu(choices, numbered=True)\n",
        "\n",
        "def _menu_with_input(choices):\n",
        "    \"\"\"Simple numbered menu implemented with input().\"\"\"\n",
        "    print(\"\\n=== WeatherWise Menu ===\")\n",
        "    for i, c in enumerate(choices, start=1):\n",
        "        print(f\"{i}. {c}\")\n",
        "    choice = input(\"Select an option (1‚Äì{0}): \".format(len(choices))).strip()\n",
        "    while choice not in [str(i) for i in range(1, len(choices) + 1)]:\n",
        "        print(\"Invalid choice, please try again.\")\n",
        "        choice = input(\"Select an option (1‚Äì{0}): \".format(len(choices))).strip()\n",
        "    return choices[int(choice) - 1]\n",
        "\n",
        "def display_menu() -> str:\n",
        "    \"\"\"\n",
        "    Show the app menu and return the selected option string.\n",
        "    \"\"\"\n",
        "    choices = [\n",
        "        \"Current Weather\",\n",
        "        \"5-Day Forecast\",\n",
        "        \"Temperature Chart\",\n",
        "        \"Precipitation Chart\",\n",
        "        \"Ask a Question\",\n",
        "        \"Exit\",\n",
        "    ]\n",
        "    if '_HAS_PYIP' in globals() and _HAS_PYIP:\n",
        "        return _menu_with_pyip(choices)\n",
        "    return _menu_with_input(choices)\n",
        "\n",
        "def show_current_weather(weather_data: dict) -> None:\n",
        "    \"\"\"\n",
        "    Pretty-print current weather from the normalised schema.\n",
        "    \"\"\"\n",
        "    if not isinstance(weather_data, dict) or weather_data.get(\"ok\") is False:\n",
        "        print(f\"Error: {weather_data.get('error','Unknown error') if isinstance(weather_data, dict) else 'Unknown error'}\")\n",
        "        return\n",
        "    cur = weather_data.get(\"current\", {}) or {}\n",
        "    print(\"\\n=== Current Weather ===\")\n",
        "    print(f\"Location: {weather_data.get('location','N/A')}\")\n",
        "    print(f\"Condition: {cur.get('condition','N/A')}\")\n",
        "    print(f\"Temperature: {cur.get('temperature','N/A')} ¬∞C\")\n",
        "    print(f\"Humidity: {cur.get('humidity','N/A')} %\")\n",
        "    print(f\"Wind: {cur.get('wind_speed','N/A')} km/h {cur.get('wind_direction','')}\")\n",
        "    print(f\"Precipitation: {cur.get('precipitation','N/A')} mm\")\n",
        "\n",
        "def show_forecast(weather_data: dict) -> None:\n",
        "    \"\"\"\n",
        "    Print a simple table of the multi-day forecast.\n",
        "    \"\"\"\n",
        "    if not isinstance(weather_data, dict) or weather_data.get(\"ok\") is False:\n",
        "        print(f\"Error: {weather_data.get('error','Unknown error') if isinstance(weather_data, dict) else 'Unknown error'}\")\n",
        "        return\n",
        "    fc = weather_data.get(\"forecast\", []) or []\n",
        "    if not fc:\n",
        "        print(\"No forecast data available.\")\n",
        "        return\n",
        "    print(\"\\n=== 5-Day Forecast ===\")\n",
        "    for d in fc:\n",
        "        print(f\"{d.get('date','?')}: {d.get('condition','?')} | \"\n",
        "              f\"{d.get('min_temp','?')}‚Äì{d.get('max_temp','?')} ¬∞C | \"\n",
        "              f\"Rain chance: {d.get('precipitation_chance','?')}%\")\n",
        "\n",
        "def ui_loop(weather_data: dict) -> None:\n",
        "    \"\"\"\n",
        "    Main UI loop for menu-driven interaction.\n",
        "    Expects a valid weather_data dict produced by get_weather_data().\n",
        "    \"\"\"\n",
        "    if not isinstance(weather_data, dict) or weather_data.get(\"ok\") is False:\n",
        "        print(f\"Error: {weather_data.get('error','Unknown error') if isinstance(weather_data, dict) else 'Unknown error'}\")\n",
        "        return\n",
        "\n",
        "    while True:\n",
        "        choice = display_menu()\n",
        "\n",
        "        if choice == \"Current Weather\":\n",
        "            show_current_weather(weather_data)\n",
        "\n",
        "        elif choice == \"5-Day Forecast\":\n",
        "            show_forecast(weather_data)\n",
        "\n",
        "        elif choice == \"Temperature Chart\":\n",
        "            create_temperature_visualisation(weather_data, output_type=\"display\")\n",
        "\n",
        "        elif choice == \"Precipitation Chart\":\n",
        "            create_precipitation_visualisation(weather_data, output_type=\"display\")\n",
        "\n",
        "        elif choice == \"Ask a Question\":\n",
        "            q = input(\"Ask a weather question (e.g., 'Will it rain tomorrow?'): \")\n",
        "            parsed = parse_weather_question(q)\n",
        "            answer = generate_weather_response(parsed, weather_data)\n",
        "            print(\"\\n=== Answer ===\")\n",
        "            print(answer)\n",
        "\n",
        "        elif choice == \"Exit\":\n",
        "            print(\"Goodbye!\")\n",
        "            break\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "d643a53c",
      "metadata": {
        "id": "d643a53c"
      },
      "source": [
        "## üß© Main Application Logic"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 30,
      "id": "a9e2e805",
      "metadata": {
        "id": "a9e2e805"
      },
      "outputs": [],
      "source": [
        "# === Main Application Logic ===\n",
        "\n",
        "def main() -> None:\n",
        "    \"\"\"\n",
        "    Entry point for the WeatherWise app.\n",
        "    Prompts for a location, fetches weather data, and starts the UI loop.\n",
        "    \"\"\"\n",
        "    print(\"=== WeatherWise ===\")\n",
        "    location = prompt_location()\n",
        "\n",
        "    print(f\"Fetching weather for: {location} ...\")\n",
        "    data = get_weather_data(location, forecast_days=5)\n",
        "\n",
        "    if not isinstance(data, dict) or data.get(\"ok\") is False:\n",
        "        print(f\"Error retrieving weather data: {data.get('error', 'Unknown error') if isinstance(data, dict) else 'Unknown error'}\")\n",
        "        return\n",
        "\n",
        "    # Start interactive menu loop\n",
        "    ui_loop(data)\n",
        "\n",
        "\n",
        "# Uncomment this line to launch the app when running the notebook\n",
        "# main()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "fde44479",
      "metadata": {
        "id": "fde44479"
      },
      "source": [
        "## üß™ Testing and Examples"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 31,
      "id": "4e573901",
      "metadata": {
        "id": "4e573901",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "8a3b67bb-aaf3-4073-d3ce-7fa661843a34"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "======== Fetch Weather Data ========\n",
            "OK: Retrieved weather for Perth at 2025-10-02 07:20:45 UTC\n",
            "\n",
            "======== Current Weather ========\n",
            "\n",
            "=== Current Weather ===\n",
            "Location: Perth\n",
            "Condition: Sunny\n",
            "Temperature: 28 ¬∞C\n",
            "Humidity: 33 %\n",
            "Wind: 10 km/h WNW\n",
            "Precipitation: 0.0 mm\n",
            "\n",
            "======== 5-Day Forecast ========\n",
            "\n",
            "=== 5-Day Forecast ===\n",
            "2025-10-02: Sunny | 12‚Äì23 ¬∞C | Rain chance: 0%\n",
            "2025-10-03: Patchy rain nearby | 15‚Äì20 ¬∞C | Rain chance: 87%\n",
            "2025-10-04: Light rain shower | 15‚Äì20 ¬∞C | Rain chance: 100%\n",
            "\n",
            "======== Temperature Chart ========\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "======== Precipitation Chart ========\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "======== NLP Q&A ========\n",
            "Q: Will it rain tomorrow in Perth?\n",
            "A: Rain is likely tomorrow in Perth (chance 87%).\n",
            "\n",
            "Q: Is it going to be hot today?\n",
            "A: Today in Perth: Sunny, 12‚Äì23¬∞C.\n",
            "\n",
            "Q: What is the wind like?\n",
            "A: Current wind in Perth is about 10 km/h WNW. Daily wind forecast is not available.\n",
            "\n",
            "Q: How humid is it?\n",
            "A: Current humidity in Perth is 33%.\n",
            "\n",
            "Q: Weather on Friday?\n",
            "A: Right now in Perth it is 28¬∞C and Sunny. Tomorrow looks Patchy rain nearby with 15‚Äì20¬∞C.\n",
            "\n"
          ]
        }
      ],
      "source": [
        "# This cell demonstrates the end-to-end behaviour of the app.\n",
        "\n",
        "def _print_section(title: str):\n",
        "    print(\"\\n\" + \"=\" * 8 + f\" {title} \" + \"=\" * 8)\n",
        "\n",
        "# 1) Fetch data for a demo location\n",
        "_print_section(\"Fetch Weather Data\")\n",
        "try:\n",
        "    demo_location = \"Perth\"\n",
        "    data = get_weather_data(demo_location, forecast_days=5)\n",
        "    if not isinstance(data, dict) or data.get(\"ok\") is False:\n",
        "        raise RuntimeError(data.get(\"error\", \"Unknown error\") if isinstance(data, dict) else \"Invalid data\")\n",
        "    print(f\"OK: Retrieved weather for {data.get('location')} at {data.get('timestamp', 'N/A')}\")\n",
        "except Exception as e:\n",
        "    print(f\"FAILED to fetch weather data: {e}\")\n",
        "\n",
        "# 2) Show current weather and 5-day forecast (text output)\n",
        "_print_section(\"Current Weather\")\n",
        "show_current_weather(data)\n",
        "\n",
        "_print_section(\"5-Day Forecast\")\n",
        "show_forecast(data)\n",
        "\n",
        "# 3) Create visualisations (temperature trend + precipitation chance)\n",
        "_print_section(\"Temperature Chart\")\n",
        "create_temperature_visualisation(data, output_type=\"display\")\n",
        "\n",
        "_print_section(\"Precipitation Chart\")\n",
        "create_precipitation_visualisation(data, output_type=\"display\")\n",
        "\n",
        "# 4) NLP Q&A examples\n",
        "_print_section(\"NLP Q&A\")\n",
        "examples = [\n",
        "    \"Will it rain tomorrow in Perth?\",\n",
        "    \"Is it going to be hot today?\",\n",
        "    \"What is the wind like?\",\n",
        "    \"How humid is it?\",\n",
        "    \"Weather on Friday?\"\n",
        "]\n",
        "for q in examples:\n",
        "    parsed = parse_weather_question(q)\n",
        "    ans = generate_weather_response(parsed, data)\n",
        "    print(f\"Q: {q}\\nA: {ans}\\n\")\n",
        "\n",
        "# 5) Optional: interactive UI loop (commented by default)\n",
        "# Uncomment the two lines below to try the interactive app after the above demos.\n",
        "# _print_section(\"Interactive Menu\")\n",
        "# ui_loop(data)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Testing and Examples 2"
      ],
      "metadata": {
        "id": "xMYXwzcE3683"
      },
      "id": "xMYXwzcE3683"
    },
    {
      "cell_type": "code",
      "source": [
        "# === Extended Tests: Multi-city Max Temperature Comparison ===\n",
        "cities = [\"Perth\", \"Sydney\"]\n",
        "series = {}\n",
        "\n",
        "for c in cities:\n",
        "    d = get_weather_data(c, 5)\n",
        "    if isinstance(d, dict) and d.get(\"ok\"):\n",
        "        series[c] = {\n",
        "            \"dates\": [day[\"date\"] for day in d[\"forecast\"]],\n",
        "            \"max\":   [day[\"max_temp\"] for day in d[\"forecast\"]],\n",
        "        }\n",
        "    else:\n",
        "        print(f\"Skipping {c}: {d.get('error','error')}\")\n",
        "\n",
        "# Plot on a single chart (no custom colors)\n",
        "if series:\n",
        "    import matplotlib.pyplot as plt\n",
        "    plt.figure()\n",
        "    for city, s in series.items():\n",
        "        plt.plot(s[\"dates\"], s[\"max\"], marker=\"o\", label=f\"{city} Max (¬∞C)\")\n",
        "    plt.title(\"Max Temperature Comparison\")\n",
        "    plt.xlabel(\"Date\")\n",
        "    plt.ylabel(\"Max Temperature (¬∞C)\")\n",
        "    plt.legend()\n",
        "    plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 410
        },
        "id": "iMlJds860Ehj",
        "outputId": "04e420d7-96ea-48b2-ab60-bba9c620e853"
      },
      "id": "iMlJds860Ehj",
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# === Extended Tests: NLP Weekday Parsing & Robustness ===\n",
        "d = get_weather_data(\"Perth\", 5)\n",
        "if isinstance(d, dict) and d.get(\"ok\"):\n",
        "    questions = [\n",
        "        \"Weather on Monday?\",\n",
        "        \"Will it rain on Thursday?\",\n",
        "        \"Is it hot tomorrow?\",\n",
        "        \"How about today?\",\n",
        "        \"   \",                     # empty-ish input\n",
        "        123,                      # non-string input\n",
        "        \"WIND details please\",    # wind keyword\n",
        "    ]\n",
        "    for q in questions:\n",
        "        parsed = parse_weather_question(q) if isinstance(q, str) else parse_weather_question(str(q))\n",
        "        ans = generate_weather_response(parsed, d)\n",
        "        print(f\"\\nQ: {q}\\nParsed: {parsed}\\nA: {ans}\")\n",
        "else:\n",
        "    print(\"Cannot run NLP tests: weather data unavailable.\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wI7RGdvO0IBy",
        "outputId": "98589262-1bcf-40b2-ddd9-91e9e932bda8"
      },
      "id": "wI7RGdvO0IBy",
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Q: Weather on Monday?\n",
            "Parsed: {'topic': 'general', 'day': 4, 'raw': 'Weather on Monday?'}\n",
            "A: Right now in Perth it is 28¬∞C and Sunny. On 2025-10-04 looks Light rain shower with 15‚Äì20¬∞C.\n",
            "\n",
            "Q: Will it rain on Thursday?\n",
            "Parsed: {'topic': 'rain', 'day': 0, 'raw': 'Will it rain on Thursday?'}\n",
            "A: Rain is unlikely today in Perth (chance 0%).\n",
            "\n",
            "Q: Is it hot tomorrow?\n",
            "Parsed: {'topic': 'temperature', 'day': 1, 'raw': 'Is it hot tomorrow?'}\n",
            "A: Tomorrow in Perth: Patchy rain nearby, 15‚Äì20¬∞C.\n",
            "\n",
            "Q: How about today?\n",
            "Parsed: {'topic': 'general', 'day': 0, 'raw': 'How about today?'}\n",
            "A: Right now in Perth it is 28¬∞C and Sunny. Today looks Sunny with 12‚Äì23¬∞C.\n",
            "\n",
            "Q:    \n",
            "Parsed: {'topic': 'general', 'day': 0, 'raw': '   '}\n",
            "A: Right now in Perth it is 28¬∞C and Sunny. Today looks Sunny with 12‚Äì23¬∞C.\n",
            "\n",
            "Q: 123\n",
            "Parsed: {'topic': 'general', 'day': 0, 'raw': '123'}\n",
            "A: Right now in Perth it is 28¬∞C and Sunny. Today looks Sunny with 12‚Äì23¬∞C.\n",
            "\n",
            "Q: WIND details please\n",
            "Parsed: {'topic': 'wind', 'day': 0, 'raw': 'WIND details please'}\n",
            "A: Current wind in Perth is about 10 km/h WNW. Daily wind forecast is not available.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# === Extended Tests: Edge Cases & Invalid Inputs ===\n",
        "def try_fetch(loc, days):\n",
        "    print(f\"\\n-- get_weather_data('{loc}', {days}) --\")\n",
        "    data = get_weather_data(loc, days)\n",
        "    if not isinstance(data, dict) or data.get(\"ok\") is False:\n",
        "        print(\"Result: ERROR ->\", data.get(\"error\", \"Unknown error\") if isinstance(data, dict) else \"Invalid payload\")\n",
        "    else:\n",
        "        fc = data.get(\"forecast\", [])\n",
        "        print(f\"Result: OK | location={data.get('location')} | days={len(fc)} | clamped_days={days}\")\n",
        "\n",
        "# forecast_days clamping tests\n",
        "try_fetch(\"Perth\", 0)    # should clamp to 1\n",
        "try_fetch(\"Perth\", 10)   # should clamp to 5\n",
        "try_fetch(\"Perth\", 3)    # normal\n",
        "\n",
        "# invalid location tests\n",
        "try_fetch(\"\", 3)               # empty\n",
        "try_fetch(\"   \", 3)            # whitespace\n",
        "try_fetch(\"ThisIsNotACity\", 3) # likely invalid\n"
      ],
      "metadata": {
        "id": "ab5TGxXb34d9",
        "outputId": "ee04cfda-6642-4875-edb6-75a7aaac29e4",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "id": "ab5TGxXb34d9",
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "-- get_weather_data('Perth', 0) --\n",
            "Result: OK | location=Perth | days=1 | clamped_days=0\n",
            "\n",
            "-- get_weather_data('Perth', 10) --\n",
            "Result: OK | location=Perth | days=3 | clamped_days=10\n",
            "\n",
            "-- get_weather_data('Perth', 3) --\n",
            "Result: OK | location=Perth | days=3 | clamped_days=3\n",
            "\n",
            "-- get_weather_data('', 3) --\n",
            "Result: OK | location= | days=3 | clamped_days=3\n",
            "\n",
            "-- get_weather_data('   ', 3) --\n",
            "Result: OK | location= | days=3 | clamped_days=3\n",
            "\n",
            "-- get_weather_data('ThisIsNotACity', 3) --\n",
            "Result: ERROR -> 404 Client Error: Not Found for url: https://wttr.in/ThisIsNotACity?format=j1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "id": "d2885880",
      "metadata": {
        "id": "d2885880"
      },
      "source": [
        "## üóÇÔ∏è AI Prompting Log (Optional)\n",
        "Add markdown cells here summarising prompts used or link to AI conversations in the `ai-conversations/` folder."
      ]
    }
  ],
  "metadata": {
    "language_info": {
      "name": "python"
    },
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}
